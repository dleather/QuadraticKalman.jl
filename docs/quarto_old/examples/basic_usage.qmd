---
title: "QuadraticKalman.jl Example"
format: html
execute:
  echo: true
  warning: false
  message: false
---

# QuadraticKalman.jl: End-to-End Example

This example demonstrates how to simulate a 2-dimensional quadratic state-space model, run the Kalman filter and smoother, and compute gradients and Hessians of the negative log-likelihood using automatic differentiation. 

## Simulation and Filtering

```julia
using QuadraticKalman
using Random, LinearAlgebra, Statistics, Plots

# Step 1: Set Parameters
N = 2 # Number of states
M = 2 # Number of measurements
T = 100 # Number of time periods to simulate
seed = 2314 # Random seed
Random.seed!(seed)

Generate stable state transition parameters
Xₜ₊₁ = μ + Φ Xₜ + Ω εₜ
Phi = [0.5 0.1; 0.1 0.3] # Autoregressive matrix
mu = [0.1, 0.2] # State drift vector
Sigma = [0.6 0.15; 0.15 0.4] # State noise covariance matrix
Omega = cholesky(Sigma).L
Generate measurement parameters
Yₜ = a + B Xₜ + α Yₜ₋₁ + ∑ Xₜ' Cᵢ Xₜ + D ηₜ
A = [0.0, 0.0] # Measurement drift vector
B = [1.0 0.0; 0.0 1.0] # Measurement state matrix
C = [[0.2 0.1; 0.1 0.0], # First measurement quadratic matrix
[0.0 0.1; 0.1 0.2]] # Second measurement quadratic matrix
V = [0.2 0.0; 0.0 0.2] # Measurement noise covariance matrix
D = cholesky(V).L
alpha = zeros(M, M) # Measurement autoregressive matrix
Step 2: Simulate states
X = zeros(N, T)
X[:,1] = (I - Phi) \ mu # Start from unconditional mean
for t in 1:(T-1)
shock = randn(N)
X[:,t+1] = mu + Phi X[:,t] + Omega shock
end
Simulate observations
Y = zeros(M, T)
for t in 1:T
noise = randn(M)
xt = X[:,t]
# Linear terms
Y[:,t] = A + B xt
if t > 1
Y[:,t] += alpha Y[:,t-1]
end
# Quadratic terms
for i in 1:M
Y[i,t] += xt' C[i] xt
end
# Add measurement noise
Y[:,t] += D noise
end
Step 3: Define Model Parameters and Data Structure
model = QKModel(N, M, mu, Phi, Omega, A, B, C, D, alpha)
data = QKData(Y)
Step 4: Run the Filter and Smoother
results = qkf_filter(data, model)
results_smoother = qkf_smoother(results, model)
Step 5: Analyze and Plot Results
println("Filter Log-Likelihoods: ", sum(results.ll_t))
plot(kalman_filter_truth_plot(X, results))
plot(kalman_smoother_truth_plot(X, results_smoother))
plot(kalman_filter_plot(results))
plot(kalman_smoother_plot(results_smoother))