[
  {
    "objectID": "examples/basic_usage.html",
    "href": "examples/basic_usage.html",
    "title": "QuadraticKalman.jl Example",
    "section": "",
    "text": "This example demonstrates how to simulate a 2-dimensional quadratic state-space model, run the Kalman filter and smoother, and compute gradients and Hessians of the negative log-likelihood using automatic differentiation.\n\n\nusing QuadraticKalman\nusing Random, LinearAlgebra, Statistics, Plots\n\n# Step 1: Set Parameters\nN = 2 # Number of states\nM = 2 # Number of measurements\nT = 100 # Number of time periods to simulate\nseed = 2314 # Random seed\nRandom.seed!(seed)\n\nGenerate stable state transition parameters\nXₜ₊₁ = μ + Φ Xₜ + Ω εₜ\nPhi = [0.5 0.1; 0.1 0.3] # Autoregressive matrix\nmu = [0.1, 0.2] # State drift vector\nSigma = [0.6 0.15; 0.15 0.4] # State noise covariance matrix\nOmega = cholesky(Sigma).L\nGenerate measurement parameters\nYₜ = a + B Xₜ + α Yₜ₋₁ + ∑ Xₜ' Cᵢ Xₜ + D ηₜ\nA = [0.0, 0.0] # Measurement drift vector\nB = [1.0 0.0; 0.0 1.0] # Measurement state matrix\nC = [[0.2 0.1; 0.1 0.0], # First measurement quadratic matrix\n[0.0 0.1; 0.1 0.2]] # Second measurement quadratic matrix\nV = [0.2 0.0; 0.0 0.2] # Measurement noise covariance matrix\nD = cholesky(V).L\nalpha = zeros(M, M) # Measurement autoregressive matrix\nStep 2: Simulate states\nX = zeros(N, T)\nX[:,1] = (I - Phi) \\ mu # Start from unconditional mean\nfor t in 1:(T-1)\nshock = randn(N)\nX[:,t+1] = mu + Phi X[:,t] + Omega shock\nend\nSimulate observations\nY = zeros(M, T)\nfor t in 1:T\nnoise = randn(M)\nxt = X[:,t]\n# Linear terms\nY[:,t] = A + B xt\nif t &gt; 1\nY[:,t] += alpha Y[:,t-1]\nend\n# Quadratic terms\nfor i in 1:M\nY[i,t] += xt' C[i] xt\nend\n# Add measurement noise\nY[:,t] += D noise\nend\nStep 3: Define Model Parameters and Data Structure\nmodel = QKModel(N, M, mu, Phi, Omega, A, B, C, D, alpha)\ndata = QKData(Y)\nStep 4: Run the Filter and Smoother\nresults = qkf_filter(data, model)\nresults_smoother = qkf_smoother(results, model)\nStep 5: Analyze and Plot Results\nprintln(\"Filter Log-Likelihoods: \", sum(results.ll_t))\nplot(kalman_filter_truth_plot(X, results))\nplot(kalman_smoother_truth_plot(X, results_smoother))\nplot(kalman_filter_plot(results))\nplot(kalman_smoother_plot(results_smoother))\n\n\n\n:::{#quarto-navigation-envelope .hidden}\n[QuadraticKalman.jl]{.hidden render-id=\"quarto-int-sidebar-title\"}\n[QuadraticKalman.jl]{.hidden render-id=\"quarto-int-navbar-title\"}\n[API Reference]{.hidden render-id=\"quarto-int-sidebar:quarto-sidebar-section-1\"}\n[Overview]{.hidden render-id=\"quarto-int-sidebar:/api/_index.qmd\"}\n[Filter]{.hidden render-id=\"quarto-int-sidebar:/api/filter.html\"}\n[Smoother]{.hidden render-id=\"quarto-int-sidebar:/api/smoother.html\"}\n[Home]{.hidden render-id=\"quarto-int-navbar:Home\"}\n[/index.html]{.hidden render-id=\"quarto-int-navbar:/index.html\"}\n[API]{.hidden render-id=\"quarto-int-navbar:API\"}\n[/api/_index.qmd]{.hidden render-id=\"quarto-int-navbar:/api/_index.qmd\"}\n[Examples]{.hidden render-id=\"quarto-int-navbar:Examples\"}\n[/examples/_index.qmd]{.hidden render-id=\"quarto-int-navbar:/examples/_index.qmd\"}\n[Guides]{.hidden render-id=\"quarto-int-navbar:Guides\"}\n[/guides/_index.qmd]{.hidden render-id=\"quarto-int-navbar:/guides/_index.qmd\"}\n[https://github.com/dleather/QuadraticKalman.jl]{.hidden render-id=\"quarto-navbar-tools:https://github.com/dleather/QuadraticKalman.jl\"}\n:::\n\n\n\n:::{#quarto-meta-markdown .hidden}\n[QuadraticKalman.jl - QuadraticKalman.jl Example]{.hidden render-id=\"quarto-metatitle\"}\n[QuadraticKalman.jl - QuadraticKalman.jl Example]{.hidden render-id=\"quarto-twittercardtitle\"}\n[QuadraticKalman.jl - QuadraticKalman.jl Example]{.hidden render-id=\"quarto-ogcardtitle\"}\n[QuadraticKalman.jl]{.hidden render-id=\"quarto-metasitename\"}\n[]{.hidden render-id=\"quarto-twittercarddesc\"}\n[]{.hidden render-id=\"quarto-ogcardddesc\"}\n:::\n\n\n\n\n&lt;!-- --&gt;\n\n::: {.quarto-embedded-source-code}\n```````````````````{.markdown shortcodes=\"false\"}\n---\ntitle: \"QuadraticKalman.jl Example\"\nformat: html\nexecute:\n  echo: true\n  warning: false\n  message: false\n---\n\n# QuadraticKalman.jl: End-to-End Example\n\nThis example demonstrates how to simulate a 2-dimensional quadratic state-space model, run the Kalman filter and smoother, and compute gradients and Hessians of the negative log-likelihood using automatic differentiation. \n\n## Simulation and Filtering\n\n```julia\nusing QuadraticKalman\nusing Random, LinearAlgebra, Statistics, Plots\n\n# Step 1: Set Parameters\nN = 2 # Number of states\nM = 2 # Number of measurements\nT = 100 # Number of time periods to simulate\nseed = 2314 # Random seed\nRandom.seed!(seed)\n\nGenerate stable state transition parameters\nXₜ₊₁ = μ + Φ Xₜ + Ω εₜ\nPhi = [0.5 0.1; 0.1 0.3] # Autoregressive matrix\nmu = [0.1, 0.2] # State drift vector\nSigma = [0.6 0.15; 0.15 0.4] # State noise covariance matrix\nOmega = cholesky(Sigma).L\nGenerate measurement parameters\nYₜ = a + B Xₜ + α Yₜ₋₁ + ∑ Xₜ' Cᵢ Xₜ + D ηₜ\nA = [0.0, 0.0] # Measurement drift vector\nB = [1.0 0.0; 0.0 1.0] # Measurement state matrix\nC = [[0.2 0.1; 0.1 0.0], # First measurement quadratic matrix\n[0.0 0.1; 0.1 0.2]] # Second measurement quadratic matrix\nV = [0.2 0.0; 0.0 0.2] # Measurement noise covariance matrix\nD = cholesky(V).L\nalpha = zeros(M, M) # Measurement autoregressive matrix\nStep 2: Simulate states\nX = zeros(N, T)\nX[:,1] = (I - Phi) \\ mu # Start from unconditional mean\nfor t in 1:(T-1)\nshock = randn(N)\nX[:,t+1] = mu + Phi X[:,t] + Omega shock\nend\nSimulate observations\nY = zeros(M, T)\nfor t in 1:T\nnoise = randn(M)\nxt = X[:,t]\n# Linear terms\nY[:,t] = A + B xt\nif t &gt; 1\nY[:,t] += alpha Y[:,t-1]\nend\n# Quadratic terms\nfor i in 1:M\nY[i,t] += xt' C[i] xt\nend\n# Add measurement noise\nY[:,t] += D noise\nend\nStep 3: Define Model Parameters and Data Structure\nmodel = QKModel(N, M, mu, Phi, Omega, A, B, C, D, alpha)\ndata = QKData(Y)\nStep 4: Run the Filter and Smoother\nresults = qkf_filter(data, model)\nresults_smoother = qkf_smoother(results, model)\nStep 5: Analyze and Plot Results\nprintln(\"Filter Log-Likelihoods: \", sum(results.ll_t))\nplot(kalman_filter_truth_plot(X, results))\nplot(kalman_smoother_truth_plot(X, results_smoother))\nplot(kalman_filter_plot(results))\nplot(kalman_smoother_plot(results_smoother))\n:::"
  },
  {
    "objectID": "examples/basic_usage.html#simulation-and-filtering",
    "href": "examples/basic_usage.html#simulation-and-filtering",
    "title": "QuadraticKalman.jl Example",
    "section": "",
    "text": "using QuadraticKalman\nusing Random, LinearAlgebra, Statistics, Plots\n\n# Step 1: Set Parameters\nN = 2 # Number of states\nM = 2 # Number of measurements\nT = 100 # Number of time periods to simulate\nseed = 2314 # Random seed\nRandom.seed!(seed)\n\nGenerate stable state transition parameters\nXₜ₊₁ = μ + Φ Xₜ + Ω εₜ\nPhi = [0.5 0.1; 0.1 0.3] # Autoregressive matrix\nmu = [0.1, 0.2] # State drift vector\nSigma = [0.6 0.15; 0.15 0.4] # State noise covariance matrix\nOmega = cholesky(Sigma).L\nGenerate measurement parameters\nYₜ = a + B Xₜ + α Yₜ₋₁ + ∑ Xₜ' Cᵢ Xₜ + D ηₜ\nA = [0.0, 0.0] # Measurement drift vector\nB = [1.0 0.0; 0.0 1.0] # Measurement state matrix\nC = [[0.2 0.1; 0.1 0.0], # First measurement quadratic matrix\n[0.0 0.1; 0.1 0.2]] # Second measurement quadratic matrix\nV = [0.2 0.0; 0.0 0.2] # Measurement noise covariance matrix\nD = cholesky(V).L\nalpha = zeros(M, M) # Measurement autoregressive matrix\nStep 2: Simulate states\nX = zeros(N, T)\nX[:,1] = (I - Phi) \\ mu # Start from unconditional mean\nfor t in 1:(T-1)\nshock = randn(N)\nX[:,t+1] = mu + Phi X[:,t] + Omega shock\nend\nSimulate observations\nY = zeros(M, T)\nfor t in 1:T\nnoise = randn(M)\nxt = X[:,t]\n# Linear terms\nY[:,t] = A + B xt\nif t &gt; 1\nY[:,t] += alpha Y[:,t-1]\nend\n# Quadratic terms\nfor i in 1:M\nY[i,t] += xt' C[i] xt\nend\n# Add measurement noise\nY[:,t] += D noise\nend\nStep 3: Define Model Parameters and Data Structure\nmodel = QKModel(N, M, mu, Phi, Omega, A, B, C, D, alpha)\ndata = QKData(Y)\nStep 4: Run the Filter and Smoother\nresults = qkf_filter(data, model)\nresults_smoother = qkf_smoother(results, model)\nStep 5: Analyze and Plot Results\nprintln(\"Filter Log-Likelihoods: \", sum(results.ll_t))\nplot(kalman_filter_truth_plot(X, results))\nplot(kalman_smoother_truth_plot(X, results_smoother))\nplot(kalman_filter_plot(results))\nplot(kalman_smoother_plot(results_smoother))\n\n\n\n:::{#quarto-navigation-envelope .hidden}\n[QuadraticKalman.jl]{.hidden render-id=\"quarto-int-sidebar-title\"}\n[QuadraticKalman.jl]{.hidden render-id=\"quarto-int-navbar-title\"}\n[API Reference]{.hidden render-id=\"quarto-int-sidebar:quarto-sidebar-section-1\"}\n[Overview]{.hidden render-id=\"quarto-int-sidebar:/api/_index.qmd\"}\n[Filter]{.hidden render-id=\"quarto-int-sidebar:/api/filter.html\"}\n[Smoother]{.hidden render-id=\"quarto-int-sidebar:/api/smoother.html\"}\n[Home]{.hidden render-id=\"quarto-int-navbar:Home\"}\n[/index.html]{.hidden render-id=\"quarto-int-navbar:/index.html\"}\n[API]{.hidden render-id=\"quarto-int-navbar:API\"}\n[/api/_index.qmd]{.hidden render-id=\"quarto-int-navbar:/api/_index.qmd\"}\n[Examples]{.hidden render-id=\"quarto-int-navbar:Examples\"}\n[/examples/_index.qmd]{.hidden render-id=\"quarto-int-navbar:/examples/_index.qmd\"}\n[Guides]{.hidden render-id=\"quarto-int-navbar:Guides\"}\n[/guides/_index.qmd]{.hidden render-id=\"quarto-int-navbar:/guides/_index.qmd\"}\n[https://github.com/dleather/QuadraticKalman.jl]{.hidden render-id=\"quarto-navbar-tools:https://github.com/dleather/QuadraticKalman.jl\"}\n:::\n\n\n\n:::{#quarto-meta-markdown .hidden}\n[QuadraticKalman.jl - QuadraticKalman.jl Example]{.hidden render-id=\"quarto-metatitle\"}\n[QuadraticKalman.jl - QuadraticKalman.jl Example]{.hidden render-id=\"quarto-twittercardtitle\"}\n[QuadraticKalman.jl - QuadraticKalman.jl Example]{.hidden render-id=\"quarto-ogcardtitle\"}\n[QuadraticKalman.jl]{.hidden render-id=\"quarto-metasitename\"}\n[]{.hidden render-id=\"quarto-twittercarddesc\"}\n[]{.hidden render-id=\"quarto-ogcardddesc\"}\n:::\n\n\n\n\n&lt;!-- --&gt;\n\n::: {.quarto-embedded-source-code}\n```````````````````{.markdown shortcodes=\"false\"}\n---\ntitle: \"QuadraticKalman.jl Example\"\nformat: html\nexecute:\n  echo: true\n  warning: false\n  message: false\n---\n\n# QuadraticKalman.jl: End-to-End Example\n\nThis example demonstrates how to simulate a 2-dimensional quadratic state-space model, run the Kalman filter and smoother, and compute gradients and Hessians of the negative log-likelihood using automatic differentiation. \n\n## Simulation and Filtering\n\n```julia\nusing QuadraticKalman\nusing Random, LinearAlgebra, Statistics, Plots\n\n# Step 1: Set Parameters\nN = 2 # Number of states\nM = 2 # Number of measurements\nT = 100 # Number of time periods to simulate\nseed = 2314 # Random seed\nRandom.seed!(seed)\n\nGenerate stable state transition parameters\nXₜ₊₁ = μ + Φ Xₜ + Ω εₜ\nPhi = [0.5 0.1; 0.1 0.3] # Autoregressive matrix\nmu = [0.1, 0.2] # State drift vector\nSigma = [0.6 0.15; 0.15 0.4] # State noise covariance matrix\nOmega = cholesky(Sigma).L\nGenerate measurement parameters\nYₜ = a + B Xₜ + α Yₜ₋₁ + ∑ Xₜ' Cᵢ Xₜ + D ηₜ\nA = [0.0, 0.0] # Measurement drift vector\nB = [1.0 0.0; 0.0 1.0] # Measurement state matrix\nC = [[0.2 0.1; 0.1 0.0], # First measurement quadratic matrix\n[0.0 0.1; 0.1 0.2]] # Second measurement quadratic matrix\nV = [0.2 0.0; 0.0 0.2] # Measurement noise covariance matrix\nD = cholesky(V).L\nalpha = zeros(M, M) # Measurement autoregressive matrix\nStep 2: Simulate states\nX = zeros(N, T)\nX[:,1] = (I - Phi) \\ mu # Start from unconditional mean\nfor t in 1:(T-1)\nshock = randn(N)\nX[:,t+1] = mu + Phi X[:,t] + Omega shock\nend\nSimulate observations\nY = zeros(M, T)\nfor t in 1:T\nnoise = randn(M)\nxt = X[:,t]\n# Linear terms\nY[:,t] = A + B xt\nif t &gt; 1\nY[:,t] += alpha Y[:,t-1]\nend\n# Quadratic terms\nfor i in 1:M\nY[i,t] += xt' C[i] xt\nend\n# Add measurement noise\nY[:,t] += D noise\nend\nStep 3: Define Model Parameters and Data Structure\nmodel = QKModel(N, M, mu, Phi, Omega, A, B, C, D, alpha)\ndata = QKData(Y)\nStep 4: Run the Filter and Smoother\nresults = qkf_filter(data, model)\nresults_smoother = qkf_smoother(results, model)\nStep 5: Analyze and Plot Results\nprintln(\"Filter Log-Likelihoods: \", sum(results.ll_t))\nplot(kalman_filter_truth_plot(X, results))\nplot(kalman_smoother_truth_plot(X, results_smoother))\nplot(kalman_filter_plot(results))\nplot(kalman_smoother_plot(results_smoother))\n:::"
  },
  {
    "objectID": "guides/plotting.html",
    "href": "guides/plotting.html",
    "title": "",
    "section": "",
    "text": "Code"
  },
  {
    "objectID": "api/filter.html",
    "href": "api/filter.html",
    "title": "",
    "section": "",
    "text": "Code"
  },
  {
    "objectID": "api/smoother.html",
    "href": "api/smoother.html",
    "title": "",
    "section": "",
    "text": "Code"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "",
    "section": "",
    "text": "Code"
  }
]